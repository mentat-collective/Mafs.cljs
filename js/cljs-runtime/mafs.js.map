{"version":3,"sources":["mafs.cljs"],"mappings":"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","names":["mafs/Theme","cljs.core.js__GT_clj","js/module$node_modules$mafs$build$index.Theme","mafs/labelPi","js/module$node_modules$mafs$build$index.labelPi","mafs/mag","p","js/module$node_modules$mafs$build$index.vec","cljs.core/clj->js","reagent.core/adapt-react-class","mafs/Mafs","js/module$node_modules$mafs$build$index.Mafs","mafs/CartesianCoordinates","js/module$node_modules$mafs$build$index.CartesianCoordinates","mafs/Point","js/module$node_modules$mafs$build$index.Point","mafs/Polygon","js/module$node_modules$mafs$build$index.Polygon","mafs/Ellipse","js/module$node_modules$mafs$build$index.Ellipse","p__48310","map__48311","cljs.core/--destructure-map","cljs.core.get","mafs/Circle","radius","props","cljs.core.assoc","mafs/Text","js/module$node_modules$mafs$build$index.Text","mafs/Vector","js/module$node_modules$mafs$build$index.Vector","mafs/Transform","js/module$node_modules$mafs$build$index.Transform","mafs/named-constraints","s","initial","G__48313","p__48314","vec__48315","cljs.core.nth","x","_","p__48319","vec__48320","y","cljs.core.ex_info","mafs/constrain->fn","constrain","cljs.core/fn?","cljs.core/Keyword","cljs.core/name","mafs/path->get","path","p1__48323#","p1__48324#","cljs.core/deref","cljs.core/vector?","cljs.core.get_in","mafs/path->set","p1__48325#","p2__48326#","p1__48327#","p2__48328#","cljs.core/reset!","cljs.core.swap_BANG_","cljs.core/assoc-in","cljs.core/assoc","p__48332","map__48333","mafs/MovablePointAtom","!state","opts","get","set","cljs.core.dissoc","p__48334","map__48335","on-change","js/module$node_modules$mafs$build$index.MovablePoint","new-point","xy","p__48338","map__48339","mafs/MovablePoint","point","with-let48340","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__40743__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init48341","cljs.core/not","res48342","reagent.core.atom"],"sourcesContent":["(ns mafs\n  \"Reagent components and utilities exposing\n  the [hooks](https://reactjs.org/docs/hooks-intro.html) declared by\n  the [Leva](https://github.com/pmndrs/leva) components GUI.\n\n  These components make it easy to synchronize state through Clojure's atom\n  interface instead of\n  [React hooks](https://reactjs.org/docs/hooks-intro.html) and callbacks.\"\n  (:require [\"mafs\" :as m]\n            [mafs.macros :refer [defcomponent]]\n            [reagent.core :as reagent]))\n\n(def Theme\n  (js->clj m/Theme :keywordize-keys true))\n\n(def labelPi m/labelPi)\n\n(defn mag\n  \"TODO expose better versions of these.\"\n  [p]\n  (.mag m/vec (clj->js p)))\n\n;; ## Components\n\n(defcomponent Mafs\n  \"\n  - `:width`\n  - `:height`\n  - `:pan`\n  - `:viewbox`\n  - `:preserve-aspect-ratio`\n  - `:ssr`\n  \"\n  m/Mafs)\n\n(defcomponent CartesianCoordinates\n  \"\n  - `:x-axis`\n  - `:y-axis`\n  - `:subdivisions`\"\n  m/CartesianCoordinates)\n\n(defcomponent Point\n  \"\n  - `:x`\n  - `:y`\n  - `:color`\n  - `:opacity`\n  - `:svg-circle-props`\n\"\n  m/Point)\n\n(defcomponent Polygon\n  \"\n  - `:points`\n  - `:svg-polygon-props`\n  - `:color`\n  - `:weight`\n  - `:fill-opacity`\n  - `:stroke-opacity`\n  - `:stroke-style`\n  \"\n  m/Polygon)\n\n(defcomponent Ellipse\n  \"\n  - `:center`\n  - `:radius`\n  - `:svg-ellipse-props`\n  - `:color`\n  - `:weight`\n  - `:fill-opacity`\n  - `:stroke-opacity`\n  - `:stroke-style`\n  \"\n  m/Ellipse)\n\n\n(defn Circle\n  \"\n  - `:center`\n  - `:radius`\n  - `:svg-ellipse-props`\n  - `:color`\n  - `:weight`\n  - `:fill-opacity`\n  - `:stroke-opacity`\n  - `:stroke-style`\n  \"\n  [{:keys [radius] :as props}]\n  [Ellipse\n   (assoc props :radius [radius radius])])\n\n(defcomponent Text\n  \"\n  - `:x`\n  - `:y`\n  - `:attach`\n  - `:attach-distance`\n  - `:size`\n  - `:color`\n  - `:svg-text-props`\n  \"\n  m/Text)\n\n(defcomponent Vector\n  \"\n  - `:tail`\n  - `:tip`\n  - `:svg-line-props`\n  - `:color`\n  - `:opacity`\n  - `:weight`\n  - `:style`\n  \"\n  m/Vector)\n\n(defcomponent Transform\n  \"\n  - `:matrix`\n  - `:translate`\n  - `:scale`\n  - `:rotate`\n  - `:shear`\n  \"\n  m/Transform)\n\n(defn ^:no-doc named-constraints\n  [s initial]\n  (case s\n    \"horizontal\" (fn [[x _]] #js [x (nth initial 1)])\n    \"vertical\"   (fn [[_ y]] #js [(nth initial 0) y])\n    (throw\n     (ex-info\n      \"Invalid constraint name: \"\n      {:constrain s}))))\n\n(defn ^:no-doc constrain->fn [constrain initial]\n  (cond (or (fn? constrain)\n            (nil? constrain))\n        constrain\n\n        (or (keyword? constrain)\n            (string? constrain))\n        (named-constraints (name constrain) initial)\n\n        :else\n        (throw\n         (ex-info \"Invalid constraint!\"\n                  {:constrain constrain}))))\n\n(defn path->get [path]\n  (cond (nil? path)    deref\n        (vector? path) #(get-in (deref %) path)\n        :else          #(get (deref %) path)))\n\n(defn path->set [path]\n  (cond (nil? path)    reset!\n        (vector? path) #(swap! %1 assoc-in path %2)\n        :else          #(swap! %1 assoc path %2)))\n\n;; TODO consolidate these two!\n\n(defn MovablePointAtom\n  \"This version takes an atom and, optionally, a path into the atom.\n  - `:atom`\n  - `:path` optional\n  - `:constrain`\n  - `:color`\"\n  [{!state :atom :keys [path constrain] :as opts}]\n  (let [get       (path->get path)\n        set       (path->set path)\n        initial   (get !state)\n        constrain (constrain->fn constrain initial)\n        ;; TODO report if constrain is nil, error!\n\n        opts (if constrain\n               (assoc opts :constrain constrain)\n               (dissoc opts :constrain))]\n    (fn [{!state :atom on-change :on-change}]\n      [:> m/MovablePoint\n       (assoc opts\n              :point (get !state)\n              :on-move\n              (fn [new-point]\n                (let [xy [(aget new-point 0) (aget new-point 1)]]\n                  (set !state xy)\n                  (when on-change\n                    (on-change xy)))))])))\n\n(defn MovablePoint\n  \"This version takes an initial point and an `:on-move`.\n\n  - `:point`\n  - `:on-move`\n  - `:constrain`\n  - `:color`\"\n  [{:keys [point] :as opts}]\n  (reagent/with-let [!state (reagent/atom point)]\n    [MovablePointAtom (assoc opts :atom !state)]))\n"]}