{"version":3,"sources":["mafs/vec.cljs"],"mappings":"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","names":["p__47743","p__47744","vec__47745","cljs.core.nth","vec__47748","mafs.vec/add","x1","y1","x2","y2","p__47751","p__47752","vec__47753","vec__47756","mafs.vec/sub","p__47759","p__47760","vec__47761","vec__47764","mafs.vec/dot","mafs.vec/mag","v","Math/sqrt","p__47767","vec__47768","mafs.vec/normal","x","y","p__47771","vec__47772","mafs.vec/scale","sc","mafs.vec/with-mag","m","mafs.vec/normalize","mafs.vec/lerp","v1","v2","t","d","p__47775","vec__47776","mafs.vec/rotate","a","c","Math/cos","s","Math/sin","mafs.vec/rotate-about","cp","mafs.vec/midpoint","p__47779","p__47780","vec__47781","vec__47784","mafs.vec/square-dist","Math/pow","mafs.vec/dist","p__47787","p__47788","vec__47789","vec__47792","mafs.vec/transform","tx","b","ty"],"sourcesContent":["(ns mafs.vec)\n\n(defn add\n  \"Add two vectors\"\n  [[x1 y1] [x2 y2]]\n  [(+ x1 x2) (+ y1 y2)])\n\n(defn sub\n  \"Subtract one vector from another\"\n  [[x1 y1] [x2 y2]]\n  [(- x1 x2) (- y1 y2)])\n\n(defn dot\n  \"Dot product of two vectors\"\n  [[x1 y1] [x2 y2]]\n  (+ (* x1 x2) (* y1 y2)))\n\n(defn mag\n  \"Get the magnitude of a vector\"\n  [v]\n  (Math/sqrt\n   (dot v v)))\n\n(defn normal\n  \"Get the normal vector of a vector\"\n  [[x y]]\n  [(- y) x])\n\n(defn scale\n  \"Scale a vector by a scalar\"\n  [[x y] sc]\n  [(* x sc) (* y sc)])\n\n(defn with-mag [v m]\n  (scale v (/ m (mag v))))\n\n(defn normalize\n  \"Return a normalized version of a vector\"\n  [v]\n  (with-mag v 1))\n\n(defn lerp\n  \"Linear interpolation between two vectors\"\n  [v1 v2 t]\n  (let [d (sub v2 v1)\n        m (mag d)]\n    (add v1 (with-mag d (* t m)))))\n\n(defn rotate\n  \"Rotates a vector around the origin. Shorthand for a rotation matrix.\"\n  [[x y] a]\n  (let [c (Math/cos a)\n        s (Math/sin a)]\n    [(- (* c x) (* s y))\n     (+ (* s x) (* c y))]))\n\n(defn rotate-about\n  \"Rotates a vector around a given point.\"\n  [v cp a]\n  (-> (sub v cp)\n      (rotate a)\n      (add cp)))\n\n(defn midpoint\n  \"Gets the midpoint of two vectors\"\n  [v1 v2]\n  (lerp v1 v2 0.5))\n\n(defn square-dist\n  \"Get the square distance between two vectors\"\n  [[x1 y1] [x2 y2]]\n  (+ (Math/pow (- x2 x1) 2)\n     (Math/pow (- y2 y1) 2)))\n\n(defn dist\n  \"Gets the distance between two vectors\"\n  [v1 v2]\n  (Math/sqrt\n   (square-dist v1 v2)))\n\n(defn transform\n  \"Apply a matrix transformation to a vector. This is a 3x3 matrix applied to a 2d\n  vector, like M*v.\"\n  [[x y] [a c tx b d ty]]\n  [(+ (* a x) (* c y) tx)\n   (+ (* b x) (* d y) ty)])\n"]}