{
"version":3,
"file":"module$node_modules$$lezer$lr$dist$index_cjs.js",
"lineCount":68,
"mappings":"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",
"sources":["node_modules/@lezer/lr/dist/index.cjs"],
"sourcesContent":["shadow$provide[\"module$node_modules$$lezer$lr$dist$index_cjs\"] = function(global,require,module,exports) {\nvar process = require('process');\n'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nvar common = require('@lezer/common');\n\n/// A parse stack. These are used internally by the parser to track\n/// parsing progress. They also provide some properties and methods\n/// that external code such as a tokenizer can use to get information\n/// about the parse state.\nclass Stack {\n    /// @internal\n    constructor(\n    /// The parse that this stack is part of @internal\n    p, \n    /// Holds state, input pos, buffer index triplets for all but the\n    /// top state @internal\n    stack, \n    /// The current parse state @internal\n    state, \n    // The position at which the next reduce should take place. This\n    // can be less than `this.pos` when skipped expressions have been\n    // added to the stack (which should be moved outside of the next\n    // reduction)\n    /// @internal\n    reducePos, \n    /// The input position up to which this stack has parsed.\n    pos, \n    /// The dynamic score of the stack, including dynamic precedence\n    /// and error-recovery penalties\n    /// @internal\n    score, \n    // The output buffer. Holds (type, start, end, size) quads\n    // representing nodes created by the parser, where `size` is\n    // amount of buffer array entries covered by this node.\n    /// @internal\n    buffer, \n    // The base offset of the buffer. When stacks are split, the split\n    // instance shared the buffer history with its parent up to\n    // `bufferBase`, which is the absolute offset (including the\n    // offset of previous splits) into the buffer at which this stack\n    // starts writing.\n    /// @internal\n    bufferBase, \n    /// @internal\n    curContext, \n    /// @internal\n    lookAhead = 0, \n    // A parent stack from which this was split off, if any. This is\n    // set up so that it always points to a stack that has some\n    // additional buffer content, never to a stack with an equal\n    // `bufferBase`.\n    /// @internal\n    parent) {\n        this.p = p;\n        this.stack = stack;\n        this.state = state;\n        this.reducePos = reducePos;\n        this.pos = pos;\n        this.score = score;\n        this.buffer = buffer;\n        this.bufferBase = bufferBase;\n        this.curContext = curContext;\n        this.lookAhead = lookAhead;\n        this.parent = parent;\n    }\n    /// @internal\n    toString() {\n        return `[${this.stack.filter((_, i) => i % 3 == 0).concat(this.state)}]@${this.pos}${this.score ? \"!\" + this.score : \"\"}`;\n    }\n    // Start an empty stack\n    /// @internal\n    static start(p, state, pos = 0) {\n        let cx = p.parser.context;\n        return new Stack(p, [], state, pos, pos, 0, [], 0, cx ? new StackContext(cx, cx.start) : null, 0, null);\n    }\n    /// The stack's current [context](#lr.ContextTracker) value, if\n    /// any. Its type will depend on the context tracker's type\n    /// parameter, or it will be `null` if there is no context\n    /// tracker.\n    get context() { return this.curContext ? this.curContext.context : null; }\n    // Push a state onto the stack, tracking its start position as well\n    // as the buffer base at that point.\n    /// @internal\n    pushState(state, start) {\n        this.stack.push(this.state, start, this.bufferBase + this.buffer.length);\n        this.state = state;\n    }\n    // Apply a reduce action\n    /// @internal\n    reduce(action) {\n        let depth = action >> 19 /* Action.ReduceDepthShift */, type = action & 65535 /* Action.ValueMask */;\n        let { parser } = this.p;\n        let dPrec = parser.dynamicPrecedence(type);\n        if (dPrec)\n            this.score += dPrec;\n        if (depth == 0) {\n            this.pushState(parser.getGoto(this.state, type, true), this.reducePos);\n            // Zero-depth reductions are a special case\u2014they add stuff to\n            // the stack without popping anything off.\n            if (type < parser.minRepeatTerm)\n                this.storeNode(type, this.reducePos, this.reducePos, 4, true);\n            this.reduceContext(type, this.reducePos);\n            return;\n        }\n        // Find the base index into `this.stack`, content after which will\n        // be dropped. Note that with `StayFlag` reductions we need to\n        // consume two extra frames (the dummy parent node for the skipped\n        // expression and the state that we'll be staying in, which should\n        // be moved to `this.state`).\n        let base = this.stack.length - ((depth - 1) * 3) - (action & 262144 /* Action.StayFlag */ ? 6 : 0);\n        let start = base ? this.stack[base - 2] : 0, size = this.reducePos - start;\n        // This is a kludge to try and detect overly deep left-associative\n        // trees, which will not increase the parse stack depth and thus\n        // won't be caught by the regular stack-depth limit check.\n        if (size >= 2000 /* Recover.MinBigReduction */) {\n            if (start == this.p.lastBigReductionStart) {\n                this.p.bigReductionCount++;\n                this.p.lastBigReductionSize = size;\n            }\n            else if (this.p.lastBigReductionSize < size) {\n                this.p.bigReductionCount = 1;\n                this.p.lastBigReductionStart = start;\n                this.p.lastBigReductionSize = size;\n            }\n        }\n        let bufferBase = base ? this.stack[base - 1] : 0, count = this.bufferBase + this.buffer.length - bufferBase;\n        // Store normal terms or `R -> R R` repeat reductions\n        if (type < parser.minRepeatTerm || (action & 131072 /* Action.RepeatFlag */)) {\n            let pos = parser.stateFlag(this.state, 1 /* StateFlag.Skipped */) ? this.pos : this.reducePos;\n            this.storeNode(type, start, pos, count + 4, true);\n        }\n        if (action & 262144 /* Action.StayFlag */) {\n            this.state = this.stack[base];\n        }\n        else {\n            let baseStateID = this.stack[base - 3];\n            this.state = parser.getGoto(baseStateID, type, true);\n        }\n        while (this.stack.length > base)\n            this.stack.pop();\n        this.reduceContext(type, start);\n    }\n    // Shift a value into the buffer\n    /// @internal\n    storeNode(term, start, end, size = 4, isReduce = false) {\n        if (term == 0 /* Term.Err */ &&\n            (!this.stack.length || this.stack[this.stack.length - 1] < this.buffer.length + this.bufferBase)) {\n            // Try to omit/merge adjacent error nodes\n            let cur = this, top = this.buffer.length;\n            if (top == 0 && cur.parent) {\n                top = cur.bufferBase - cur.parent.bufferBase;\n                cur = cur.parent;\n            }\n            if (top > 0 && cur.buffer[top - 4] == 0 /* Term.Err */ && cur.buffer[top - 1] > -1) {\n                if (start == end)\n                    return;\n                if (cur.buffer[top - 2] >= start) {\n                    cur.buffer[top - 2] = end;\n                    return;\n                }\n            }\n        }\n        if (!isReduce || this.pos == end) { // Simple case, just append\n            this.buffer.push(term, start, end, size);\n        }\n        else { // There may be skipped nodes that have to be moved forward\n            let index = this.buffer.length;\n            if (index > 0 && this.buffer[index - 4] != 0 /* Term.Err */)\n                while (index > 0 && this.buffer[index - 2] > end) {\n                    // Move this record forward\n                    this.buffer[index] = this.buffer[index - 4];\n                    this.buffer[index + 1] = this.buffer[index - 3];\n                    this.buffer[index + 2] = this.buffer[index - 2];\n                    this.buffer[index + 3] = this.buffer[index - 1];\n                    index -= 4;\n                    if (size > 4)\n                        size -= 4;\n                }\n            this.buffer[index] = term;\n            this.buffer[index + 1] = start;\n            this.buffer[index + 2] = end;\n            this.buffer[index + 3] = size;\n        }\n    }\n    // Apply a shift action\n    /// @internal\n    shift(action, next, nextEnd) {\n        let start = this.pos;\n        if (action & 131072 /* Action.GotoFlag */) {\n            this.pushState(action & 65535 /* Action.ValueMask */, this.pos);\n        }\n        else if ((action & 262144 /* Action.StayFlag */) == 0) { // Regular shift\n            let nextState = action, { parser } = this.p;\n            if (nextEnd > this.pos || next <= parser.maxNode) {\n                this.pos = nextEnd;\n                if (!parser.stateFlag(nextState, 1 /* StateFlag.Skipped */))\n                    this.reducePos = nextEnd;\n            }\n            this.pushState(nextState, start);\n            this.shiftContext(next, start);\n            if (next <= parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n        else { // Shift-and-stay, which means this is a skipped token\n            this.pos = nextEnd;\n            this.shiftContext(next, start);\n            if (next <= this.p.parser.maxNode)\n                this.buffer.push(next, start, nextEnd, 4);\n        }\n    }\n    // Apply an action\n    /// @internal\n    apply(action, next, nextEnd) {\n        if (action & 65536 /* Action.ReduceFlag */)\n            this.reduce(action);\n        else\n            this.shift(action, next, nextEnd);\n    }\n    // Add a prebuilt (reused) node into the buffer.\n    /// @internal\n    useNode(value, next) {\n        let index = this.p.reused.length - 1;\n        if (index < 0 || this.p.reused[index] != value) {\n            this.p.reused.push(value);\n            index++;\n        }\n        let start = this.pos;\n        this.reducePos = this.pos = start + value.length;\n        this.pushState(next, start);\n        this.buffer.push(index, start, this.reducePos, -1 /* size == -1 means this is a reused value */);\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reuse(this.curContext.context, value, this, this.p.stream.reset(this.pos - value.length)));\n    }\n    // Split the stack. Due to the buffer sharing and the fact\n    // that `this.stack` tends to stay quite shallow, this isn't very\n    // expensive.\n    /// @internal\n    split() {\n        let parent = this;\n        let off = parent.buffer.length;\n        // Because the top of the buffer (after this.pos) may be mutated\n        // to reorder reductions and skipped tokens, and shared buffers\n        // should be immutable, this copies any outstanding skipped tokens\n        // to the new buffer, and puts the base pointer before them.\n        while (off > 0 && parent.buffer[off - 2] > parent.reducePos)\n            off -= 4;\n        let buffer = parent.buffer.slice(off), base = parent.bufferBase + off;\n        // Make sure parent points to an actual parent with content, if there is such a parent.\n        while (parent && base == parent.bufferBase)\n            parent = parent.parent;\n        return new Stack(this.p, this.stack.slice(), this.state, this.reducePos, this.pos, this.score, buffer, base, this.curContext, this.lookAhead, parent);\n    }\n    // Try to recover from an error by 'deleting' (ignoring) one token.\n    /// @internal\n    recoverByDelete(next, nextEnd) {\n        let isNode = next <= this.p.parser.maxNode;\n        if (isNode)\n            this.storeNode(next, this.pos, nextEnd, 4);\n        this.storeNode(0 /* Term.Err */, this.pos, nextEnd, isNode ? 8 : 4);\n        this.pos = this.reducePos = nextEnd;\n        this.score -= 190 /* Recover.Delete */;\n    }\n    /// Check if the given term would be able to be shifted (optionally\n    /// after some reductions) on this stack. This can be useful for\n    /// external tokenizers that want to make sure they only provide a\n    /// given token when it applies.\n    canShift(term) {\n        for (let sim = new SimulatedStack(this);;) {\n            let action = this.p.parser.stateSlot(sim.state, 4 /* ParseState.DefaultReduce */) || this.p.parser.hasAction(sim.state, term);\n            if (action == 0)\n                return false;\n            if ((action & 65536 /* Action.ReduceFlag */) == 0)\n                return true;\n            sim.reduce(action);\n        }\n    }\n    // Apply up to Recover.MaxNext recovery actions that conceptually\n    // inserts some missing token or rule.\n    /// @internal\n    recoverByInsert(next) {\n        if (this.stack.length >= 300 /* Recover.MaxInsertStackDepth */)\n            return [];\n        let nextStates = this.p.parser.nextStates(this.state);\n        if (nextStates.length > 4 /* Recover.MaxNext */ << 1 || this.stack.length >= 120 /* Recover.DampenInsertStackDepth */) {\n            let best = [];\n            for (let i = 0, s; i < nextStates.length; i += 2) {\n                if ((s = nextStates[i + 1]) != this.state && this.p.parser.hasAction(s, next))\n                    best.push(nextStates[i], s);\n            }\n            if (this.stack.length < 120 /* Recover.DampenInsertStackDepth */)\n                for (let i = 0; best.length < 4 /* Recover.MaxNext */ << 1 && i < nextStates.length; i += 2) {\n                    let s = nextStates[i + 1];\n                    if (!best.some((v, i) => (i & 1) && v == s))\n                        best.push(nextStates[i], s);\n                }\n            nextStates = best;\n        }\n        let result = [];\n        for (let i = 0; i < nextStates.length && result.length < 4 /* Recover.MaxNext */; i += 2) {\n            let s = nextStates[i + 1];\n            if (s == this.state)\n                continue;\n            let stack = this.split();\n            stack.pushState(s, this.pos);\n            stack.storeNode(0 /* Term.Err */, stack.pos, stack.pos, 4, true);\n            stack.shiftContext(nextStates[i], this.pos);\n            stack.score -= 200 /* Recover.Insert */;\n            result.push(stack);\n        }\n        return result;\n    }\n    // Force a reduce, if possible. Return false if that can't\n    // be done.\n    /// @internal\n    forceReduce() {\n        let reduce = this.p.parser.stateSlot(this.state, 5 /* ParseState.ForcedReduce */);\n        if ((reduce & 65536 /* Action.ReduceFlag */) == 0)\n            return false;\n        let { parser } = this.p;\n        if (!parser.validAction(this.state, reduce)) {\n            let depth = reduce >> 19 /* Action.ReduceDepthShift */, term = reduce & 65535 /* Action.ValueMask */;\n            let target = this.stack.length - depth * 3;\n            if (target < 0 || parser.getGoto(this.stack[target], term, false) < 0)\n                return false;\n            this.storeNode(0 /* Term.Err */, this.reducePos, this.reducePos, 4, true);\n            this.score -= 100 /* Recover.Reduce */;\n        }\n        this.reducePos = this.pos;\n        this.reduce(reduce);\n        return true;\n    }\n    /// @internal\n    forceAll() {\n        while (!this.p.parser.stateFlag(this.state, 2 /* StateFlag.Accepting */)) {\n            if (!this.forceReduce()) {\n                this.storeNode(0 /* Term.Err */, this.pos, this.pos, 4, true);\n                break;\n            }\n        }\n        return this;\n    }\n    /// Check whether this state has no further actions (assumed to be a direct descendant of the\n    /// top state, since any other states must be able to continue\n    /// somehow). @internal\n    get deadEnd() {\n        if (this.stack.length != 3)\n            return false;\n        let { parser } = this.p;\n        return parser.data[parser.stateSlot(this.state, 1 /* ParseState.Actions */)] == 65535 /* Seq.End */ &&\n            !parser.stateSlot(this.state, 4 /* ParseState.DefaultReduce */);\n    }\n    /// Restart the stack (put it back in its start state). Only safe\n    /// when this.stack.length == 3 (state is directly below the top\n    /// state). @internal\n    restart() {\n        this.state = this.stack[0];\n        this.stack.length = 0;\n    }\n    /// @internal\n    sameState(other) {\n        if (this.state != other.state || this.stack.length != other.stack.length)\n            return false;\n        for (let i = 0; i < this.stack.length; i += 3)\n            if (this.stack[i] != other.stack[i])\n                return false;\n        return true;\n    }\n    /// Get the parser used by this stack.\n    get parser() { return this.p.parser; }\n    /// Test whether a given dialect (by numeric ID, as exported from\n    /// the terms file) is enabled.\n    dialectEnabled(dialectID) { return this.p.parser.dialect.flags[dialectID]; }\n    shiftContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.shift(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    reduceContext(term, start) {\n        if (this.curContext)\n            this.updateContext(this.curContext.tracker.reduce(this.curContext.context, term, this, this.p.stream.reset(start)));\n    }\n    /// @internal\n    emitContext() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -3)\n            this.buffer.push(this.curContext.hash, this.reducePos, this.reducePos, -3);\n    }\n    /// @internal\n    emitLookAhead() {\n        let last = this.buffer.length - 1;\n        if (last < 0 || this.buffer[last] != -4)\n            this.buffer.push(this.lookAhead, this.reducePos, this.reducePos, -4);\n    }\n    updateContext(context) {\n        if (context != this.curContext.context) {\n            let newCx = new StackContext(this.curContext.tracker, context);\n            if (newCx.hash != this.curContext.hash)\n                this.emitContext();\n            this.curContext = newCx;\n        }\n    }\n    /// @internal\n    setLookAhead(lookAhead) {\n        if (lookAhead > this.lookAhead) {\n            this.emitLookAhead();\n            this.lookAhead = lookAhead;\n        }\n    }\n    /// @internal\n    close() {\n        if (this.curContext && this.curContext.tracker.strict)\n            this.emitContext();\n        if (this.lookAhead > 0)\n            this.emitLookAhead();\n    }\n}\nclass StackContext {\n    constructor(tracker, context) {\n        this.tracker = tracker;\n        this.context = context;\n        this.hash = tracker.strict ? tracker.hash(context) : 0;\n    }\n}\nvar Recover;\n(function (Recover) {\n    Recover[Recover[\"Insert\"] = 200] = \"Insert\";\n    Recover[Recover[\"Delete\"] = 190] = \"Delete\";\n    Recover[Recover[\"Reduce\"] = 100] = \"Reduce\";\n    Recover[Recover[\"MaxNext\"] = 4] = \"MaxNext\";\n    Recover[Recover[\"MaxInsertStackDepth\"] = 300] = \"MaxInsertStackDepth\";\n    Recover[Recover[\"DampenInsertStackDepth\"] = 120] = \"DampenInsertStackDepth\";\n    Recover[Recover[\"MinBigReduction\"] = 2000] = \"MinBigReduction\";\n})(Recover || (Recover = {}));\n// Used to cheaply run some reductions to scan ahead without mutating\n// an entire stack\nclass SimulatedStack {\n    constructor(start) {\n        this.start = start;\n        this.state = start.state;\n        this.stack = start.stack;\n        this.base = this.stack.length;\n    }\n    reduce(action) {\n        let term = action & 65535 /* Action.ValueMask */, depth = action >> 19 /* Action.ReduceDepthShift */;\n        if (depth == 0) {\n            if (this.stack == this.start.stack)\n                this.stack = this.stack.slice();\n            this.stack.push(this.state, 0, 0);\n            this.base += 3;\n        }\n        else {\n            this.base -= (depth - 1) * 3;\n        }\n        let goto = this.start.p.parser.getGoto(this.stack[this.base - 3], term, true);\n        this.state = goto;\n    }\n}\n// This is given to `Tree.build` to build a buffer, and encapsulates\n// the parent-stack-walking necessary to read the nodes.\nclass StackBufferCursor {\n    constructor(stack, pos, index) {\n        this.stack = stack;\n        this.pos = pos;\n        this.index = index;\n        this.buffer = stack.buffer;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    static create(stack, pos = stack.bufferBase + stack.buffer.length) {\n        return new StackBufferCursor(stack, pos, pos - stack.bufferBase);\n    }\n    maybeNext() {\n        let next = this.stack.parent;\n        if (next != null) {\n            this.index = this.stack.bufferBase - next.bufferBase;\n            this.stack = next;\n            this.buffer = next.buffer;\n        }\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    next() {\n        this.index -= 4;\n        this.pos -= 4;\n        if (this.index == 0)\n            this.maybeNext();\n    }\n    fork() {\n        return new StackBufferCursor(this.stack, this.pos, this.index);\n    }\n}\n\n// See lezer-generator/src/encode.ts for comments about the encoding\n// used here\nfunction decodeArray(input, Type = Uint16Array) {\n    if (typeof input != \"string\")\n        return input;\n    let array = null;\n    for (let pos = 0, out = 0; pos < input.length;) {\n        let value = 0;\n        for (;;) {\n            let next = input.charCodeAt(pos++), stop = false;\n            if (next == 126 /* Encode.BigValCode */) {\n                value = 65535 /* Encode.BigVal */;\n                break;\n            }\n            if (next >= 92 /* Encode.Gap2 */)\n                next--;\n            if (next >= 34 /* Encode.Gap1 */)\n                next--;\n            let digit = next - 32 /* Encode.Start */;\n            if (digit >= 46 /* Encode.Base */) {\n                digit -= 46 /* Encode.Base */;\n                stop = true;\n            }\n            value += digit;\n            if (stop)\n                break;\n            value *= 46 /* Encode.Base */;\n        }\n        if (array)\n            array[out++] = value;\n        else\n            array = new Type(value);\n    }\n    return array;\n}\n\nclass CachedToken {\n    constructor() {\n        this.start = -1;\n        this.value = -1;\n        this.end = -1;\n        this.extended = -1;\n        this.lookAhead = 0;\n        this.mask = 0;\n        this.context = 0;\n    }\n}\nconst nullToken = new CachedToken;\n/// [Tokenizers](#lr.ExternalTokenizer) interact with the input\n/// through this interface. It presents the input as a stream of\n/// characters, tracking lookahead and hiding the complexity of\n/// [ranges](#common.Parser.parse^ranges) from tokenizer code.\nclass InputStream {\n    /// @internal\n    constructor(\n    /// @internal\n    input, \n    /// @internal\n    ranges) {\n        this.input = input;\n        this.ranges = ranges;\n        /// @internal\n        this.chunk = \"\";\n        /// @internal\n        this.chunkOff = 0;\n        /// Backup chunk\n        this.chunk2 = \"\";\n        this.chunk2Pos = 0;\n        /// The character code of the next code unit in the input, or -1\n        /// when the stream is at the end of the input.\n        this.next = -1;\n        /// @internal\n        this.token = nullToken;\n        this.rangeIndex = 0;\n        this.pos = this.chunkPos = ranges[0].from;\n        this.range = ranges[0];\n        this.end = ranges[ranges.length - 1].to;\n        this.readNext();\n    }\n    /// @internal\n    resolveOffset(offset, assoc) {\n        let range = this.range, index = this.rangeIndex;\n        let pos = this.pos + offset;\n        while (pos < range.from) {\n            if (!index)\n                return null;\n            let next = this.ranges[--index];\n            pos -= range.from - next.to;\n            range = next;\n        }\n        while (assoc < 0 ? pos > range.to : pos >= range.to) {\n            if (index == this.ranges.length - 1)\n                return null;\n            let next = this.ranges[++index];\n            pos += next.from - range.to;\n            range = next;\n        }\n        return pos;\n    }\n    /// @internal\n    clipPos(pos) {\n        if (pos >= this.range.from && pos < this.range.to)\n            return pos;\n        for (let range of this.ranges)\n            if (range.to > pos)\n                return Math.max(pos, range.from);\n        return this.end;\n    }\n    /// Look at a code unit near the stream position. `.peek(0)` equals\n    /// `.next`, `.peek(-1)` gives you the previous character, and so\n    /// on.\n    ///\n    /// Note that looking around during tokenizing creates dependencies\n    /// on potentially far-away content, which may reduce the\n    /// effectiveness incremental parsing\u2014when looking forward\u2014or even\n    /// cause invalid reparses when looking backward more than 25 code\n    /// units, since the library does not track lookbehind.\n    peek(offset) {\n        let idx = this.chunkOff + offset, pos, result;\n        if (idx >= 0 && idx < this.chunk.length) {\n            pos = this.pos + offset;\n            result = this.chunk.charCodeAt(idx);\n        }\n        else {\n            let resolved = this.resolveOffset(offset, 1);\n            if (resolved == null)\n                return -1;\n            pos = resolved;\n            if (pos >= this.chunk2Pos && pos < this.chunk2Pos + this.chunk2.length) {\n                result = this.chunk2.charCodeAt(pos - this.chunk2Pos);\n            }\n            else {\n                let i = this.rangeIndex, range = this.range;\n                while (range.to <= pos)\n                    range = this.ranges[++i];\n                this.chunk2 = this.input.chunk(this.chunk2Pos = pos);\n                if (pos + this.chunk2.length > range.to)\n                    this.chunk2 = this.chunk2.slice(0, range.to - pos);\n                result = this.chunk2.charCodeAt(0);\n            }\n        }\n        if (pos >= this.token.lookAhead)\n            this.token.lookAhead = pos + 1;\n        return result;\n    }\n    /// Accept a token. By default, the end of the token is set to the\n    /// current stream position, but you can pass an offset (relative to\n    /// the stream position) to change that.\n    acceptToken(token, endOffset = 0) {\n        let end = endOffset ? this.resolveOffset(endOffset, -1) : this.pos;\n        if (end == null || end < this.token.start)\n            throw new RangeError(\"Token end out of bounds\");\n        this.token.value = token;\n        this.token.end = end;\n    }\n    getChunk() {\n        if (this.pos >= this.chunk2Pos && this.pos < this.chunk2Pos + this.chunk2.length) {\n            let { chunk, chunkPos } = this;\n            this.chunk = this.chunk2;\n            this.chunkPos = this.chunk2Pos;\n            this.chunk2 = chunk;\n            this.chunk2Pos = chunkPos;\n            this.chunkOff = this.pos - this.chunkPos;\n        }\n        else {\n            this.chunk2 = this.chunk;\n            this.chunk2Pos = this.chunkPos;\n            let nextChunk = this.input.chunk(this.pos);\n            let end = this.pos + nextChunk.length;\n            this.chunk = end > this.range.to ? nextChunk.slice(0, this.range.to - this.pos) : nextChunk;\n            this.chunkPos = this.pos;\n            this.chunkOff = 0;\n        }\n    }\n    readNext() {\n        if (this.chunkOff >= this.chunk.length) {\n            this.getChunk();\n            if (this.chunkOff == this.chunk.length)\n                return this.next = -1;\n        }\n        return this.next = this.chunk.charCodeAt(this.chunkOff);\n    }\n    /// Move the stream forward N (defaults to 1) code units. Returns\n    /// the new value of [`next`](#lr.InputStream.next).\n    advance(n = 1) {\n        this.chunkOff += n;\n        while (this.pos + n >= this.range.to) {\n            if (this.rangeIndex == this.ranges.length - 1)\n                return this.setDone();\n            n -= this.range.to - this.pos;\n            this.range = this.ranges[++this.rangeIndex];\n            this.pos = this.range.from;\n        }\n        this.pos += n;\n        if (this.pos >= this.token.lookAhead)\n            this.token.lookAhead = this.pos + 1;\n        return this.readNext();\n    }\n    setDone() {\n        this.pos = this.chunkPos = this.end;\n        this.range = this.ranges[this.rangeIndex = this.ranges.length - 1];\n        this.chunk = \"\";\n        return this.next = -1;\n    }\n    /// @internal\n    reset(pos, token) {\n        if (token) {\n            this.token = token;\n            token.start = pos;\n            token.lookAhead = pos + 1;\n            token.value = token.extended = -1;\n        }\n        else {\n            this.token = nullToken;\n        }\n        if (this.pos != pos) {\n            this.pos = pos;\n            if (pos == this.end) {\n                this.setDone();\n                return this;\n            }\n            while (pos < this.range.from)\n                this.range = this.ranges[--this.rangeIndex];\n            while (pos >= this.range.to)\n                this.range = this.ranges[++this.rangeIndex];\n            if (pos >= this.chunkPos && pos < this.chunkPos + this.chunk.length) {\n                this.chunkOff = pos - this.chunkPos;\n            }\n            else {\n                this.chunk = \"\";\n                this.chunkOff = 0;\n            }\n            this.readNext();\n        }\n        return this;\n    }\n    /// @internal\n    read(from, to) {\n        if (from >= this.chunkPos && to <= this.chunkPos + this.chunk.length)\n            return this.chunk.slice(from - this.chunkPos, to - this.chunkPos);\n        if (from >= this.chunk2Pos && to <= this.chunk2Pos + this.chunk2.length)\n            return this.chunk2.slice(from - this.chunk2Pos, to - this.chunk2Pos);\n        if (from >= this.range.from && to <= this.range.to)\n            return this.input.read(from, to);\n        let result = \"\";\n        for (let r of this.ranges) {\n            if (r.from >= to)\n                break;\n            if (r.to > from)\n                result += this.input.read(Math.max(r.from, from), Math.min(r.to, to));\n        }\n        return result;\n    }\n}\n/// @internal\nclass TokenGroup {\n    constructor(data, id) {\n        this.data = data;\n        this.id = id;\n    }\n    token(input, stack) {\n        let { parser } = stack.p;\n        readToken(this.data, input, stack, this.id, parser.data, parser.tokenPrecTable);\n    }\n}\nTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// @hide\nclass LocalTokenGroup {\n    constructor(data, precTable, elseToken) {\n        this.precTable = precTable;\n        this.elseToken = elseToken;\n        this.data = typeof data == \"string\" ? decodeArray(data) : data;\n    }\n    token(input, stack) {\n        let start = input.pos, cur;\n        for (;;) {\n            cur = input.pos;\n            readToken(this.data, input, stack, 0, this.data, this.precTable);\n            if (input.token.value > -1)\n                break;\n            if (this.elseToken == null)\n                return;\n            if (input.next < 0)\n                break;\n            input.advance();\n            input.reset(cur + 1, input.token);\n        }\n        if (cur > start) {\n            input.reset(start, input.token);\n            input.acceptToken(this.elseToken, cur - start);\n        }\n    }\n}\nLocalTokenGroup.prototype.contextual = TokenGroup.prototype.fallback = TokenGroup.prototype.extend = false;\n/// `@external tokens` declarations in the grammar should resolve to\n/// an instance of this class.\nclass ExternalTokenizer {\n    /// Create a tokenizer. The first argument is the function that,\n    /// given an input stream, scans for the types of tokens it\n    /// recognizes at the stream's position, and calls\n    /// [`acceptToken`](#lr.InputStream.acceptToken) when it finds\n    /// one.\n    constructor(\n    /// @internal\n    token, options = {}) {\n        this.token = token;\n        this.contextual = !!options.contextual;\n        this.fallback = !!options.fallback;\n        this.extend = !!options.extend;\n    }\n}\n// Tokenizer data is stored a big uint16 array containing, for each\n// state:\n//\n//  - A group bitmask, indicating what token groups are reachable from\n//    this state, so that paths that can only lead to tokens not in\n//    any of the current groups can be cut off early.\n//\n//  - The position of the end of the state's sequence of accepting\n//    tokens\n//\n//  - The number of outgoing edges for the state\n//\n//  - The accepting tokens, as (token id, group mask) pairs\n//\n//  - The outgoing edges, as (start character, end character, state\n//    index) triples, with end character being exclusive\n//\n// This function interprets that data, running through a stream as\n// long as new states with the a matching group mask can be reached,\n// and updating `input.token` when it matches a token.\nfunction readToken(data, input, stack, group, precTable, precOffset) {\n    let state = 0, groupMask = 1 << group, { dialect } = stack.p.parser;\n    scan: for (;;) {\n        if ((groupMask & data[state]) == 0)\n            break;\n        let accEnd = data[state + 1];\n        // Check whether this state can lead to a token in the current group\n        // Accept tokens in this state, possibly overwriting\n        // lower-precedence / shorter tokens\n        for (let i = state + 3; i < accEnd; i += 2)\n            if ((data[i + 1] & groupMask) > 0) {\n                let term = data[i];\n                if (dialect.allows(term) &&\n                    (input.token.value == -1 || input.token.value == term ||\n                        overrides(term, input.token.value, precTable, precOffset))) {\n                    input.acceptToken(term);\n                    break;\n                }\n            }\n        let next = input.next, low = 0, high = data[state + 2];\n        // Special case for EOF\n        if (input.next < 0 && high > low && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */ && data[accEnd + high * 3 - 3] == 65535 /* Seq.End */) {\n            state = data[accEnd + high * 3 - 1];\n            continue scan;\n        }\n        // Do a binary search on the state's edges\n        for (; low < high;) {\n            let mid = (low + high) >> 1;\n            let index = accEnd + mid + (mid << 1);\n            let from = data[index], to = data[index + 1] || 0x10000;\n            if (next < from)\n                high = mid;\n            else if (next >= to)\n                low = mid + 1;\n            else {\n                state = data[index + 2];\n                input.advance();\n                continue scan;\n            }\n        }\n        break;\n    }\n}\nfunction findOffset(data, start, term) {\n    for (let i = start, next; (next = data[i]) != 65535 /* Seq.End */; i++)\n        if (next == term)\n            return i - start;\n    return -1;\n}\nfunction overrides(token, prev, tableData, tableOffset) {\n    let iPrev = findOffset(tableData, tableOffset, prev);\n    return iPrev < 0 || findOffset(tableData, tableOffset, token) < iPrev;\n}\n\n// Environment variable used to control console output\nconst verbose = typeof process != \"undefined\" && process.env && /\\bparse\\b/.test(process.env.LOG);\nlet stackIDs = null;\nvar Safety;\n(function (Safety) {\n    Safety[Safety[\"Margin\"] = 25] = \"Margin\";\n})(Safety || (Safety = {}));\nfunction cutAt(tree, pos, side) {\n    let cursor = tree.cursor(common.IterMode.IncludeAnonymous);\n    cursor.moveTo(pos);\n    for (;;) {\n        if (!(side < 0 ? cursor.childBefore(pos) : cursor.childAfter(pos)))\n            for (;;) {\n                if ((side < 0 ? cursor.to < pos : cursor.from > pos) && !cursor.type.isError)\n                    return side < 0 ? Math.max(0, Math.min(cursor.to - 1, pos - 25 /* Safety.Margin */))\n                        : Math.min(tree.length, Math.max(cursor.from + 1, pos + 25 /* Safety.Margin */));\n                if (side < 0 ? cursor.prevSibling() : cursor.nextSibling())\n                    break;\n                if (!cursor.parent())\n                    return side < 0 ? 0 : tree.length;\n            }\n    }\n}\nclass FragmentCursor {\n    constructor(fragments, nodeSet) {\n        this.fragments = fragments;\n        this.nodeSet = nodeSet;\n        this.i = 0;\n        this.fragment = null;\n        this.safeFrom = -1;\n        this.safeTo = -1;\n        this.trees = [];\n        this.start = [];\n        this.index = [];\n        this.nextFragment();\n    }\n    nextFragment() {\n        let fr = this.fragment = this.i == this.fragments.length ? null : this.fragments[this.i++];\n        if (fr) {\n            this.safeFrom = fr.openStart ? cutAt(fr.tree, fr.from + fr.offset, 1) - fr.offset : fr.from;\n            this.safeTo = fr.openEnd ? cutAt(fr.tree, fr.to + fr.offset, -1) - fr.offset : fr.to;\n            while (this.trees.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n            }\n            this.trees.push(fr.tree);\n            this.start.push(-fr.offset);\n            this.index.push(0);\n            this.nextStart = this.safeFrom;\n        }\n        else {\n            this.nextStart = 1e9;\n        }\n    }\n    // `pos` must be >= any previously given `pos` for this cursor\n    nodeAt(pos) {\n        if (pos < this.nextStart)\n            return null;\n        while (this.fragment && this.safeTo <= pos)\n            this.nextFragment();\n        if (!this.fragment)\n            return null;\n        for (;;) {\n            let last = this.trees.length - 1;\n            if (last < 0) { // End of tree\n                this.nextFragment();\n                return null;\n            }\n            let top = this.trees[last], index = this.index[last];\n            if (index == top.children.length) {\n                this.trees.pop();\n                this.start.pop();\n                this.index.pop();\n                continue;\n            }\n            let next = top.children[index];\n            let start = this.start[last] + top.positions[index];\n            if (start > pos) {\n                this.nextStart = start;\n                return null;\n            }\n            if (next instanceof common.Tree) {\n                if (start == pos) {\n                    if (start < this.safeFrom)\n                        return null;\n                    let end = start + next.length;\n                    if (end <= this.safeTo) {\n                        let lookAhead = next.prop(common.NodeProp.lookAhead);\n                        if (!lookAhead || end + lookAhead < this.fragment.to)\n                            return next;\n                    }\n                }\n                this.index[last]++;\n                if (start + next.length >= Math.max(this.safeFrom, pos)) { // Enter this node\n                    this.trees.push(next);\n                    this.start.push(start);\n                    this.index.push(0);\n                }\n            }\n            else {\n                this.index[last]++;\n                this.nextStart = start + next.length;\n            }\n        }\n    }\n}\nclass TokenCache {\n    constructor(parser, stream) {\n        this.stream = stream;\n        this.tokens = [];\n        this.mainToken = null;\n        this.actions = [];\n        this.tokens = parser.tokenizers.map(_ => new CachedToken);\n    }\n    getActions(stack) {\n        let actionIndex = 0;\n        let main = null;\n        let { parser } = stack.p, { tokenizers } = parser;\n        let mask = parser.stateSlot(stack.state, 3 /* ParseState.TokenizerMask */);\n        let context = stack.curContext ? stack.curContext.hash : 0;\n        let lookAhead = 0;\n        for (let i = 0; i < tokenizers.length; i++) {\n            if (((1 << i) & mask) == 0)\n                continue;\n            let tokenizer = tokenizers[i], token = this.tokens[i];\n            if (main && !tokenizer.fallback)\n                continue;\n            if (tokenizer.contextual || token.start != stack.pos || token.mask != mask || token.context != context) {\n                this.updateCachedToken(token, tokenizer, stack);\n                token.mask = mask;\n                token.context = context;\n            }\n            if (token.lookAhead > token.end + 25 /* Safety.Margin */)\n                lookAhead = Math.max(token.lookAhead, lookAhead);\n            if (token.value != 0 /* Term.Err */) {\n                let startIndex = actionIndex;\n                if (token.extended > -1)\n                    actionIndex = this.addActions(stack, token.extended, token.end, actionIndex);\n                actionIndex = this.addActions(stack, token.value, token.end, actionIndex);\n                if (!tokenizer.extend) {\n                    main = token;\n                    if (actionIndex > startIndex)\n                        break;\n                }\n            }\n        }\n        while (this.actions.length > actionIndex)\n            this.actions.pop();\n        if (lookAhead)\n            stack.setLookAhead(lookAhead);\n        if (!main && stack.pos == this.stream.end) {\n            main = new CachedToken;\n            main.value = stack.p.parser.eofTerm;\n            main.start = main.end = stack.pos;\n            actionIndex = this.addActions(stack, main.value, main.end, actionIndex);\n        }\n        this.mainToken = main;\n        return this.actions;\n    }\n    getMainToken(stack) {\n        if (this.mainToken)\n            return this.mainToken;\n        let main = new CachedToken, { pos, p } = stack;\n        main.start = pos;\n        main.end = Math.min(pos + 1, p.stream.end);\n        main.value = pos == p.stream.end ? p.parser.eofTerm : 0 /* Term.Err */;\n        return main;\n    }\n    updateCachedToken(token, tokenizer, stack) {\n        let start = this.stream.clipPos(stack.pos);\n        tokenizer.token(this.stream.reset(start, token), stack);\n        if (token.value > -1) {\n            let { parser } = stack.p;\n            for (let i = 0; i < parser.specialized.length; i++)\n                if (parser.specialized[i] == token.value) {\n                    let result = parser.specializers[i](this.stream.read(token.start, token.end), stack);\n                    if (result >= 0 && stack.p.parser.dialect.allows(result >> 1)) {\n                        if ((result & 1) == 0 /* Specialize.Specialize */)\n                            token.value = result >> 1;\n                        else\n                            token.extended = result >> 1;\n                        break;\n                    }\n                }\n        }\n        else {\n            token.value = 0 /* Term.Err */;\n            token.end = this.stream.clipPos(start + 1);\n        }\n    }\n    putAction(action, token, end, index) {\n        // Don't add duplicate actions\n        for (let i = 0; i < index; i += 3)\n            if (this.actions[i] == action)\n                return index;\n        this.actions[index++] = action;\n        this.actions[index++] = token;\n        this.actions[index++] = end;\n        return index;\n    }\n    addActions(stack, token, end, index) {\n        let { state } = stack, { parser } = stack.p, { data } = parser;\n        for (let set = 0; set < 2; set++) {\n            for (let i = parser.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */);; i += 3) {\n                if (data[i] == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */) {\n                        i = pair(data, i + 2);\n                    }\n                    else {\n                        if (index == 0 && data[i + 1] == 2 /* Seq.Other */)\n                            index = this.putAction(pair(data, i + 2), token, end, index);\n                        break;\n                    }\n                }\n                if (data[i] == token)\n                    index = this.putAction(pair(data, i + 1), token, end, index);\n            }\n        }\n        return index;\n    }\n}\nvar Rec;\n(function (Rec) {\n    Rec[Rec[\"Distance\"] = 5] = \"Distance\";\n    Rec[Rec[\"MaxRemainingPerStep\"] = 3] = \"MaxRemainingPerStep\";\n    // When two stacks have been running independently long enough to\n    // add this many elements to their buffers, prune one.\n    Rec[Rec[\"MinBufferLengthPrune\"] = 500] = \"MinBufferLengthPrune\";\n    Rec[Rec[\"ForceReduceLimit\"] = 10] = \"ForceReduceLimit\";\n    // Once a stack reaches this depth (in .stack.length) force-reduce\n    // it back to CutTo to avoid creating trees that overflow the stack\n    // on recursive traversal.\n    Rec[Rec[\"CutDepth\"] = 15000] = \"CutDepth\";\n    Rec[Rec[\"CutTo\"] = 9000] = \"CutTo\";\n    Rec[Rec[\"MaxLeftAssociativeReductionCount\"] = 1000] = \"MaxLeftAssociativeReductionCount\";\n})(Rec || (Rec = {}));\nclass Parse {\n    constructor(parser, input, fragments, ranges) {\n        this.parser = parser;\n        this.input = input;\n        this.ranges = ranges;\n        this.recovering = 0;\n        this.nextStackID = 0x2654; // \u2654, \u2655, \u2656, \u2657, \u2658, \u2659, \u2660, \u2661, \u2662, \u2663, \u2664, \u2665, \u2666, \u2667\n        this.minStackPos = 0;\n        this.reused = [];\n        this.stoppedAt = null;\n        this.lastBigReductionStart = -1;\n        this.lastBigReductionSize = 0;\n        this.bigReductionCount = 0;\n        this.stream = new InputStream(input, ranges);\n        this.tokens = new TokenCache(parser, this.stream);\n        this.topTerm = parser.top[1];\n        let { from } = ranges[0];\n        this.stacks = [Stack.start(this, parser.top[0], from)];\n        this.fragments = fragments.length && this.stream.end - from > parser.bufferLength * 4\n            ? new FragmentCursor(fragments, parser.nodeSet) : null;\n    }\n    get parsedPos() {\n        return this.minStackPos;\n    }\n    // Move the parser forward. This will process all parse stacks at\n    // `this.pos` and try to advance them to a further position. If no\n    // stack for such a position is found, it'll start error-recovery.\n    //\n    // When the parse is finished, this will return a syntax tree. When\n    // not, it returns `null`.\n    advance() {\n        let stacks = this.stacks, pos = this.minStackPos;\n        // This will hold stacks beyond `pos`.\n        let newStacks = this.stacks = [];\n        let stopped, stoppedTokens;\n        // If a large amount of reductions happened with the same start\n        // position, force the stack out of that production in order to\n        // avoid creating a tree too deep to recurse through.\n        // (This is an ugly kludge, because unfortunately there is no\n        // straightforward, cheap way to check for this happening, due to\n        // the history of reductions only being available in an\n        // expensive-to-access format in the stack buffers.)\n        if (this.bigReductionCount > 1000 /* Rec.MaxLeftAssociativeReductionCount */ && stacks.length == 1) {\n            let [s] = stacks;\n            while (s.forceReduce() && s.stack.length && s.stack[s.stack.length - 2] >= this.lastBigReductionStart) { }\n            this.bigReductionCount = this.lastBigReductionSize = 0;\n        }\n        // Keep advancing any stacks at `pos` until they either move\n        // forward or can't be advanced. Gather stacks that can't be\n        // advanced further in `stopped`.\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i];\n            for (;;) {\n                this.tokens.mainToken = null;\n                if (stack.pos > pos) {\n                    newStacks.push(stack);\n                }\n                else if (this.advanceStack(stack, newStacks, stacks)) {\n                    continue;\n                }\n                else {\n                    if (!stopped) {\n                        stopped = [];\n                        stoppedTokens = [];\n                    }\n                    stopped.push(stack);\n                    let tok = this.tokens.getMainToken(stack);\n                    stoppedTokens.push(tok.value, tok.end);\n                }\n                break;\n            }\n        }\n        if (!newStacks.length) {\n            let finished = stopped && findFinished(stopped);\n            if (finished)\n                return this.stackToTree(finished);\n            if (this.parser.strict) {\n                if (verbose && stopped)\n                    console.log(\"Stuck with token \" + (this.tokens.mainToken ? this.parser.getName(this.tokens.mainToken.value) : \"none\"));\n                throw new SyntaxError(\"No parse at \" + pos);\n            }\n            if (!this.recovering)\n                this.recovering = 5 /* Rec.Distance */;\n        }\n        if (this.recovering && stopped) {\n            let finished = this.stoppedAt != null && stopped[0].pos > this.stoppedAt ? stopped[0]\n                : this.runRecovery(stopped, stoppedTokens, newStacks);\n            if (finished)\n                return this.stackToTree(finished.forceAll());\n        }\n        if (this.recovering) {\n            let maxRemaining = this.recovering == 1 ? 1 : this.recovering * 3 /* Rec.MaxRemainingPerStep */;\n            if (newStacks.length > maxRemaining) {\n                newStacks.sort((a, b) => b.score - a.score);\n                while (newStacks.length > maxRemaining)\n                    newStacks.pop();\n            }\n            if (newStacks.some(s => s.reducePos > pos))\n                this.recovering--;\n        }\n        else if (newStacks.length > 1) {\n            // Prune stacks that are in the same state, or that have been\n            // running without splitting for a while, to avoid getting stuck\n            // with multiple successful stacks running endlessly on.\n            outer: for (let i = 0; i < newStacks.length - 1; i++) {\n                let stack = newStacks[i];\n                for (let j = i + 1; j < newStacks.length; j++) {\n                    let other = newStacks[j];\n                    if (stack.sameState(other) ||\n                        stack.buffer.length > 500 /* Rec.MinBufferLengthPrune */ && other.buffer.length > 500 /* Rec.MinBufferLengthPrune */) {\n                        if (((stack.score - other.score) || (stack.buffer.length - other.buffer.length)) > 0) {\n                            newStacks.splice(j--, 1);\n                        }\n                        else {\n                            newStacks.splice(i--, 1);\n                            continue outer;\n                        }\n                    }\n                }\n            }\n        }\n        this.minStackPos = newStacks[0].pos;\n        for (let i = 1; i < newStacks.length; i++)\n            if (newStacks[i].pos < this.minStackPos)\n                this.minStackPos = newStacks[i].pos;\n        return null;\n    }\n    stopAt(pos) {\n        if (this.stoppedAt != null && this.stoppedAt < pos)\n            throw new RangeError(\"Can't move stoppedAt forward\");\n        this.stoppedAt = pos;\n    }\n    // Returns an updated version of the given stack, or null if the\n    // stack can't advance normally. When `split` and `stacks` are\n    // given, stacks split off by ambiguous operations will be pushed to\n    // `split`, or added to `stacks` if they move `pos` forward.\n    advanceStack(stack, stacks, split) {\n        let start = stack.pos, { parser } = this;\n        let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n        if (this.stoppedAt != null && start > this.stoppedAt)\n            return stack.forceReduce() ? stack : null;\n        if (this.fragments) {\n            let strictCx = stack.curContext && stack.curContext.tracker.strict, cxHash = strictCx ? stack.curContext.hash : 0;\n            for (let cached = this.fragments.nodeAt(start); cached;) {\n                let match = this.parser.nodeSet.types[cached.type.id] == cached.type ? parser.getGoto(stack.state, cached.type.id) : -1;\n                if (match > -1 && cached.length && (!strictCx || (cached.prop(common.NodeProp.contextHash) || 0) == cxHash)) {\n                    stack.useNode(cached, match);\n                    if (verbose)\n                        console.log(base + this.stackID(stack) + ` (via reuse of ${parser.getName(cached.type.id)})`);\n                    return true;\n                }\n                if (!(cached instanceof common.Tree) || cached.children.length == 0 || cached.positions[0] > 0)\n                    break;\n                let inner = cached.children[0];\n                if (inner instanceof common.Tree && cached.positions[0] == 0)\n                    cached = inner;\n                else\n                    break;\n            }\n        }\n        let defaultReduce = parser.stateSlot(stack.state, 4 /* ParseState.DefaultReduce */);\n        if (defaultReduce > 0) {\n            stack.reduce(defaultReduce);\n            if (verbose)\n                console.log(base + this.stackID(stack) + ` (via always-reduce ${parser.getName(defaultReduce & 65535 /* Action.ValueMask */)})`);\n            return true;\n        }\n        if (stack.stack.length >= 15000 /* Rec.CutDepth */) {\n            while (stack.stack.length > 9000 /* Rec.CutTo */ && stack.forceReduce()) { }\n        }\n        let actions = this.tokens.getActions(stack);\n        for (let i = 0; i < actions.length;) {\n            let action = actions[i++], term = actions[i++], end = actions[i++];\n            let last = i == actions.length || !split;\n            let localStack = last ? stack : stack.split();\n            localStack.apply(action, term, end);\n            if (verbose)\n                console.log(base + this.stackID(localStack) + ` (via ${(action & 65536 /* Action.ReduceFlag */) == 0 ? \"shift\"\n                    : `reduce of ${parser.getName(action & 65535 /* Action.ValueMask */)}`} for ${parser.getName(term)} @ ${start}${localStack == stack ? \"\" : \", split\"})`);\n            if (last)\n                return true;\n            else if (localStack.pos > start)\n                stacks.push(localStack);\n            else\n                split.push(localStack);\n        }\n        return false;\n    }\n    // Advance a given stack forward as far as it will go. Returns the\n    // (possibly updated) stack if it got stuck, or null if it moved\n    // forward and was given to `pushStackDedup`.\n    advanceFully(stack, newStacks) {\n        let pos = stack.pos;\n        for (;;) {\n            if (!this.advanceStack(stack, null, null))\n                return false;\n            if (stack.pos > pos) {\n                pushStackDedup(stack, newStacks);\n                return true;\n            }\n        }\n    }\n    runRecovery(stacks, tokens, newStacks) {\n        let finished = null, restarted = false;\n        for (let i = 0; i < stacks.length; i++) {\n            let stack = stacks[i], token = tokens[i << 1], tokenEnd = tokens[(i << 1) + 1];\n            let base = verbose ? this.stackID(stack) + \" -> \" : \"\";\n            if (stack.deadEnd) {\n                if (restarted)\n                    continue;\n                restarted = true;\n                stack.restart();\n                if (verbose)\n                    console.log(base + this.stackID(stack) + \" (restarted)\");\n                let done = this.advanceFully(stack, newStacks);\n                if (done)\n                    continue;\n            }\n            let force = stack.split(), forceBase = base;\n            for (let j = 0; force.forceReduce() && j < 10 /* Rec.ForceReduceLimit */; j++) {\n                if (verbose)\n                    console.log(forceBase + this.stackID(force) + \" (via force-reduce)\");\n                let done = this.advanceFully(force, newStacks);\n                if (done)\n                    break;\n                if (verbose)\n                    forceBase = this.stackID(force) + \" -> \";\n            }\n            for (let insert of stack.recoverByInsert(token)) {\n                if (verbose)\n                    console.log(base + this.stackID(insert) + \" (via recover-insert)\");\n                this.advanceFully(insert, newStacks);\n            }\n            if (this.stream.end > stack.pos) {\n                if (tokenEnd == stack.pos) {\n                    tokenEnd++;\n                    token = 0 /* Term.Err */;\n                }\n                stack.recoverByDelete(token, tokenEnd);\n                if (verbose)\n                    console.log(base + this.stackID(stack) + ` (via recover-delete ${this.parser.getName(token)})`);\n                pushStackDedup(stack, newStacks);\n            }\n            else if (!finished || finished.score < stack.score) {\n                finished = stack;\n            }\n        }\n        return finished;\n    }\n    // Convert the stack's buffer to a syntax tree.\n    stackToTree(stack) {\n        stack.close();\n        return common.Tree.build({ buffer: StackBufferCursor.create(stack),\n            nodeSet: this.parser.nodeSet,\n            topID: this.topTerm,\n            maxBufferLength: this.parser.bufferLength,\n            reused: this.reused,\n            start: this.ranges[0].from,\n            length: stack.pos - this.ranges[0].from,\n            minRepeatType: this.parser.minRepeatTerm });\n    }\n    stackID(stack) {\n        let id = (stackIDs || (stackIDs = new WeakMap)).get(stack);\n        if (!id)\n            stackIDs.set(stack, id = String.fromCodePoint(this.nextStackID++));\n        return id + stack;\n    }\n}\nfunction pushStackDedup(stack, newStacks) {\n    for (let i = 0; i < newStacks.length; i++) {\n        let other = newStacks[i];\n        if (other.pos == stack.pos && other.sameState(stack)) {\n            if (newStacks[i].score < stack.score)\n                newStacks[i] = stack;\n            return;\n        }\n    }\n    newStacks.push(stack);\n}\nclass Dialect {\n    constructor(source, flags, disabled) {\n        this.source = source;\n        this.flags = flags;\n        this.disabled = disabled;\n    }\n    allows(term) { return !this.disabled || this.disabled[term] == 0; }\n}\nconst id = x => x;\n/// Context trackers are used to track stateful context (such as\n/// indentation in the Python grammar, or parent elements in the XML\n/// grammar) needed by external tokenizers. You declare them in a\n/// grammar file as `@context exportName from \"module\"`.\n///\n/// Context values should be immutable, and can be updated (replaced)\n/// on shift or reduce actions.\n///\n/// The export used in a `@context` declaration should be of this\n/// type.\nclass ContextTracker {\n    /// Define a context tracker.\n    constructor(spec) {\n        this.start = spec.start;\n        this.shift = spec.shift || id;\n        this.reduce = spec.reduce || id;\n        this.reuse = spec.reuse || id;\n        this.hash = spec.hash || (() => 0);\n        this.strict = spec.strict !== false;\n    }\n}\n/// Holds the parse tables for a given grammar, as generated by\n/// `lezer-generator`, and provides [methods](#common.Parser) to parse\n/// content with.\nclass LRParser extends common.Parser {\n    /// @internal\n    constructor(spec) {\n        super();\n        /// @internal\n        this.wrappers = [];\n        if (spec.version != 14 /* File.Version */)\n            throw new RangeError(`Parser version (${spec.version}) doesn't match runtime version (${14 /* File.Version */})`);\n        let nodeNames = spec.nodeNames.split(\" \");\n        this.minRepeatTerm = nodeNames.length;\n        for (let i = 0; i < spec.repeatNodeCount; i++)\n            nodeNames.push(\"\");\n        let topTerms = Object.keys(spec.topRules).map(r => spec.topRules[r][1]);\n        let nodeProps = [];\n        for (let i = 0; i < nodeNames.length; i++)\n            nodeProps.push([]);\n        function setProp(nodeID, prop, value) {\n            nodeProps[nodeID].push([prop, prop.deserialize(String(value))]);\n        }\n        if (spec.nodeProps)\n            for (let propSpec of spec.nodeProps) {\n                let prop = propSpec[0];\n                if (typeof prop == \"string\")\n                    prop = common.NodeProp[prop];\n                for (let i = 1; i < propSpec.length;) {\n                    let next = propSpec[i++];\n                    if (next >= 0) {\n                        setProp(next, prop, propSpec[i++]);\n                    }\n                    else {\n                        let value = propSpec[i + -next];\n                        for (let j = -next; j > 0; j--)\n                            setProp(propSpec[i++], prop, value);\n                        i++;\n                    }\n                }\n            }\n        this.nodeSet = new common.NodeSet(nodeNames.map((name, i) => common.NodeType.define({\n            name: i >= this.minRepeatTerm ? undefined : name,\n            id: i,\n            props: nodeProps[i],\n            top: topTerms.indexOf(i) > -1,\n            error: i == 0,\n            skipped: spec.skippedNodes && spec.skippedNodes.indexOf(i) > -1\n        })));\n        if (spec.propSources)\n            this.nodeSet = this.nodeSet.extend(...spec.propSources);\n        this.strict = false;\n        this.bufferLength = common.DefaultBufferLength;\n        let tokenArray = decodeArray(spec.tokenData);\n        this.context = spec.context;\n        this.specializerSpecs = spec.specialized || [];\n        this.specialized = new Uint16Array(this.specializerSpecs.length);\n        for (let i = 0; i < this.specializerSpecs.length; i++)\n            this.specialized[i] = this.specializerSpecs[i].term;\n        this.specializers = this.specializerSpecs.map(getSpecializer);\n        this.states = decodeArray(spec.states, Uint32Array);\n        this.data = decodeArray(spec.stateData);\n        this.goto = decodeArray(spec.goto);\n        this.maxTerm = spec.maxTerm;\n        this.tokenizers = spec.tokenizers.map(value => typeof value == \"number\" ? new TokenGroup(tokenArray, value) : value);\n        this.topRules = spec.topRules;\n        this.dialects = spec.dialects || {};\n        this.dynamicPrecedences = spec.dynamicPrecedences || null;\n        this.tokenPrecTable = spec.tokenPrec;\n        this.termNames = spec.termNames || null;\n        this.maxNode = this.nodeSet.types.length - 1;\n        this.dialect = this.parseDialect();\n        this.top = this.topRules[Object.keys(this.topRules)[0]];\n    }\n    createParse(input, fragments, ranges) {\n        let parse = new Parse(this, input, fragments, ranges);\n        for (let w of this.wrappers)\n            parse = w(parse, input, fragments, ranges);\n        return parse;\n    }\n    /// Get a goto table entry @internal\n    getGoto(state, term, loose = false) {\n        let table = this.goto;\n        if (term >= table[0])\n            return -1;\n        for (let pos = table[term + 1];;) {\n            let groupTag = table[pos++], last = groupTag & 1;\n            let target = table[pos++];\n            if (last && loose)\n                return target;\n            for (let end = pos + (groupTag >> 1); pos < end; pos++)\n                if (table[pos] == state)\n                    return target;\n            if (last)\n                return -1;\n        }\n    }\n    /// Check if this state has an action for a given terminal @internal\n    hasAction(state, terminal) {\n        let data = this.data;\n        for (let set = 0; set < 2; set++) {\n            for (let i = this.stateSlot(state, set ? 2 /* ParseState.Skip */ : 1 /* ParseState.Actions */), next;; i += 3) {\n                if ((next = data[i]) == 65535 /* Seq.End */) {\n                    if (data[i + 1] == 1 /* Seq.Next */)\n                        next = data[i = pair(data, i + 2)];\n                    else if (data[i + 1] == 2 /* Seq.Other */)\n                        return pair(data, i + 2);\n                    else\n                        break;\n                }\n                if (next == terminal || next == 0 /* Term.Err */)\n                    return pair(data, i + 1);\n            }\n        }\n        return 0;\n    }\n    /// @internal\n    stateSlot(state, slot) {\n        return this.states[(state * 6 /* ParseState.Size */) + slot];\n    }\n    /// @internal\n    stateFlag(state, flag) {\n        return (this.stateSlot(state, 0 /* ParseState.Flags */) & flag) > 0;\n    }\n    /// @internal\n    validAction(state, action) {\n        if (action == this.stateSlot(state, 4 /* ParseState.DefaultReduce */))\n            return true;\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    return false;\n            }\n            if (action == pair(this.data, i + 1))\n                return true;\n        }\n    }\n    /// Get the states that can follow this one through shift actions or\n    /// goto jumps. @internal\n    nextStates(state) {\n        let result = [];\n        for (let i = this.stateSlot(state, 1 /* ParseState.Actions */);; i += 3) {\n            if (this.data[i] == 65535 /* Seq.End */) {\n                if (this.data[i + 1] == 1 /* Seq.Next */)\n                    i = pair(this.data, i + 2);\n                else\n                    break;\n            }\n            if ((this.data[i + 2] & (65536 /* Action.ReduceFlag */ >> 16)) == 0) {\n                let value = this.data[i + 1];\n                if (!result.some((v, i) => (i & 1) && v == value))\n                    result.push(this.data[i], value);\n            }\n        }\n        return result;\n    }\n    /// Configure the parser. Returns a new parser instance that has the\n    /// given settings modified. Settings not provided in `config` are\n    /// kept from the original parser.\n    configure(config) {\n        // Hideous reflection-based kludge to make it easy to create a\n        // slightly modified copy of a parser.\n        let copy = Object.assign(Object.create(LRParser.prototype), this);\n        if (config.props)\n            copy.nodeSet = this.nodeSet.extend(...config.props);\n        if (config.top) {\n            let info = this.topRules[config.top];\n            if (!info)\n                throw new RangeError(`Invalid top rule name ${config.top}`);\n            copy.top = info;\n        }\n        if (config.tokenizers)\n            copy.tokenizers = this.tokenizers.map(t => {\n                let found = config.tokenizers.find(r => r.from == t);\n                return found ? found.to : t;\n            });\n        if (config.specializers) {\n            copy.specializers = this.specializers.slice();\n            copy.specializerSpecs = this.specializerSpecs.map((s, i) => {\n                let found = config.specializers.find(r => r.from == s.external);\n                if (!found)\n                    return s;\n                let spec = Object.assign(Object.assign({}, s), { external: found.to });\n                copy.specializers[i] = getSpecializer(spec);\n                return spec;\n            });\n        }\n        if (config.contextTracker)\n            copy.context = config.contextTracker;\n        if (config.dialect)\n            copy.dialect = this.parseDialect(config.dialect);\n        if (config.strict != null)\n            copy.strict = config.strict;\n        if (config.wrap)\n            copy.wrappers = copy.wrappers.concat(config.wrap);\n        if (config.bufferLength != null)\n            copy.bufferLength = config.bufferLength;\n        return copy;\n    }\n    /// Tells you whether any [parse wrappers](#lr.ParserConfig.wrap)\n    /// are registered for this parser.\n    hasWrappers() {\n        return this.wrappers.length > 0;\n    }\n    /// Returns the name associated with a given term. This will only\n    /// work for all terms when the parser was generated with the\n    /// `--names` option. By default, only the names of tagged terms are\n    /// stored.\n    getName(term) {\n        return this.termNames ? this.termNames[term] : String(term <= this.maxNode && this.nodeSet.types[term].name || term);\n    }\n    /// The eof term id is always allocated directly after the node\n    /// types. @internal\n    get eofTerm() { return this.maxNode + 1; }\n    /// The type of top node produced by the parser.\n    get topNode() { return this.nodeSet.types[this.top[1]]; }\n    /// @internal\n    dynamicPrecedence(term) {\n        let prec = this.dynamicPrecedences;\n        return prec == null ? 0 : prec[term] || 0;\n    }\n    /// @internal\n    parseDialect(dialect) {\n        let values = Object.keys(this.dialects), flags = values.map(() => false);\n        if (dialect)\n            for (let part of dialect.split(\" \")) {\n                let id = values.indexOf(part);\n                if (id >= 0)\n                    flags[id] = true;\n            }\n        let disabled = null;\n        for (let i = 0; i < values.length; i++)\n            if (!flags[i]) {\n                for (let j = this.dialects[values[i]], id; (id = this.data[j++]) != 65535 /* Seq.End */;)\n                    (disabled || (disabled = new Uint8Array(this.maxTerm + 1)))[id] = 1;\n            }\n        return new Dialect(dialect, flags, disabled);\n    }\n    /// Used by the output of the parser generator. Not available to\n    /// user code. @hide\n    static deserialize(spec) {\n        return new LRParser(spec);\n    }\n}\nfunction pair(data, off) { return data[off] | (data[off + 1] << 16); }\nfunction findFinished(stacks) {\n    let best = null;\n    for (let stack of stacks) {\n        let stopped = stack.p.stoppedAt;\n        if ((stack.pos == stack.p.stream.end || stopped != null && stack.pos > stopped) &&\n            stack.p.parser.stateFlag(stack.state, 2 /* StateFlag.Accepting */) &&\n            (!best || best.score < stack.score))\n            best = stack;\n    }\n    return best;\n}\nfunction getSpecializer(spec) {\n    if (spec.external) {\n        let mask = spec.extend ? 1 /* Specialize.Extend */ : 0 /* Specialize.Specialize */;\n        return (value, stack) => (spec.external(value, stack) << 1) | mask;\n    }\n    return spec.get;\n}\n\nexports.ContextTracker = ContextTracker;\nexports.ExternalTokenizer = ExternalTokenizer;\nexports.InputStream = InputStream;\nexports.LRParser = LRParser;\nexports.LocalTokenGroup = LocalTokenGroup;\nexports.Stack = Stack;\n\n};"],
"names":["shadow$provide","global","require","module","exports","decodeArray","input","Type","Uint16Array","array","pos","out","length","value","next","charCodeAt","stop","digit","readToken","data","stack","group","precTable","precOffset","state","groupMask","dialect","p","parser","accEnd","i","term","iPrev","findOffset","tableData","tableOffset","prev","token","acceptToken","low","high","mid","index","to","from","advance","start","cutAt","tree","side","cursor","common","IterMode","IncludeAnonymous","moveTo","childBefore","childAfter","type","isError","Math","max","min","prevSibling","nextSibling","parent","pushStackDedup","newStacks","other","sameState","score","push","pair","off","findFinished","stacks","best","stopped","stoppedAt","stream","end","stateFlag","getSpecializer","spec","external","mask","extend","get","process","Object","defineProperty","Stack","constructor","reducePos","buffer","bufferBase","curContext","lookAhead","toString","filter","_","concat","cx","context","StackContext","pushState","reduce","action","depth","dPrec","dynamicPrecedence","getGoto","minRepeatTerm","storeNode","reduceContext","base","size","lastBigReductionStart","bigReductionCount","lastBigReductionSize","count","baseStateID","pop","isReduce","cur","top","shift","nextEnd","maxNode","shiftContext","apply","useNode","reused","updateContext","tracker","reuse","reset","split","slice","recoverByDelete","isNode","canShift","sim","SimulatedStack","stateSlot","hasAction","recoverByInsert","nextStates","s","some","v","result","forceReduce","validAction","target","forceAll","restart","dialectEnabled","dialectID","flags","emitContext","last","hash","emitLookAhead","newCx","setLookAhead","close","strict","Recover","goto","StackBufferCursor","maybeNext","create","fork","CachedToken","extended","nullToken","InputStream","ranges","chunk","chunkOff","chunk2","chunk2Pos","rangeIndex","chunkPos","range","readNext","resolveOffset","offset","assoc","clipPos","peek","idx","resolved","endOffset","RangeError","getChunk","nextChunk","n","setDone","read","r","TokenGroup","id","tokenPrecTable","prototype","contextual","fallback","LocalTokenGroup","elseToken","ExternalTokenizer","options","verbose","env","test","LOG","stackIDs","Safety","FragmentCursor","fragments","nodeSet","fragment","safeTo","safeFrom","trees","nextFragment","fr","openStart","openEnd","nextStart","nodeAt","children","positions","Tree","prop","NodeProp","TokenCache","tokens","mainToken","actions","tokenizers","map","getActions","actionIndex","main","tokenizer","updateCachedToken","startIndex","addActions","eofTerm","getMainToken","specialized","specializers","allows","putAction","set","Rec","Parse","recovering","nextStackID","minStackPos","topTerm","bufferLength","advanceStack","stoppedTokens","tok","finished","stackToTree","console","log","getName","SyntaxError","runRecovery","maxRemaining","sort","a","b","j","splice","stopAt","stackID","strictCx","cxHash","cached","match","types","contextHash","inner","defaultReduce","localStack","advanceFully","restarted","tokenEnd","deadEnd","done","force","forceBase","insert","build","topID","maxBufferLength","minRepeatType","WeakMap","String","fromCodePoint","Dialect","source","disabled","x","ContextTracker","LRParser","Parser","setProp","nodeID","nodeProps","deserialize","wrappers","version","nodeNames","repeatNodeCount","topTerms","keys","topRules","propSpec","NodeSet","name","NodeType","define","undefined","props","indexOf","error","skipped","skippedNodes","propSources","DefaultBufferLength","tokenArray","tokenData","specializerSpecs","states","Uint32Array","stateData","maxTerm","dialects","dynamicPrecedences","tokenPrec","termNames","parseDialect","createParse","parse","w","loose","table","groupTag","terminal","slot","flag","configure","config","copy","assign","info","t","found","find","contextTracker","wrap","hasWrappers","prec","values","part","Uint8Array"]
}
